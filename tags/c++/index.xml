<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>C&#43;&#43; on erenon.hu</title>
    <link>http://erenon.hu/tags/c&#43;&#43;/</link>
    <description>Recent content in C&#43;&#43; on erenon.hu</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Thu, 12 Sep 2019 00:00:00 +0000</lastBuildDate><atom:link href="http://erenon.hu/tags/c++/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Overloading by concept without concepts in C&#43;&#43;</title>
      <link>http://erenon.hu/posts/2019-09-12-concept-overloading/</link>
      <pubDate>Thu, 12 Sep 2019 00:00:00 +0000</pubDate>
      
      <guid>http://erenon.hu/posts/2019-09-12-concept-overloading/</guid>
      <description>Given the following function:
void f(int);  Suppose you want to make the behaviour of this function to depend on the argument type. A simple way to use overloading:
void f(int); void f(double);  What if you want to define an overload for a set of types, which satisfy a given concept? As of C++20, concepts can be used for overloading. Before that, the function has to be converted to a template.</description>
    </item>
    
    <item>
      <title>Imprisoned Toroid - Raytrace on CUDA</title>
      <link>http://erenon.hu/posts/2012-11-25-imprisoned-toroid-raytrace-on-cuda/</link>
      <pubDate>Sun, 25 Nov 2012 00:00:00 +0000</pubDate>
      
      <guid>http://erenon.hu/posts/2012-11-25-imprisoned-toroid-raytrace-on-cuda/</guid>
      <description>The following video is created by a C++/CUDA program using the theory of raytracing which was the most interesting piece of knowledge I learned on the university this semester.
Because of its as-good-as-it-should-be quality of the source, I can&amp;rsquo;t opensource it at this precise moment. Meanwhile, take a look at OptiX, which I found a month later I had completed this.
The video was rendered at 24 FPS, render time appr.</description>
    </item>
    
  </channel>
</rss>
